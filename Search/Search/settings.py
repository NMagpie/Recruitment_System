"""
Django settings for Search project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv

import ssl

from urllib.parse import quote_plus as urlquote

import urllib3
from urllib3.exceptions import InsecureRequestWarning

urllib3.disable_warnings(InsecureRequestWarning)

urllib3.disable_warnings(UserWarning)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-c9zu&3!u5+qz7$#havvl6c*tzm6#@kt#nm-)8bi&u0ft^dbr!='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# SAGA CONFIGURATION

app_name = "Search"

# SECURITY CONFIGURATION

load_dotenv()

# SECURITY FILES

caRootLocation = './secrets/CARoot.pem'
certLocation = './secrets/certificate.pem'
keyLocation = './secrets/key.pem'
certKey = './secrets/cert_key.pem'

SSL_PASSWORD = os.environ.get('SSL_PASSWORD')

# ELASTICSEARCH CONFIGURATION

ELASTIC_HOST = os.environ.get("ELASTIC_HOST")

ELASTIC_PORT = os.environ.get("ELASTIC_PORT")

ELASTIC_USER = os.environ.get("ELASTIC_USER")

ELASTIC_PASSWORD = os.environ.get("ELASTIC_PASSWORD")

elk_base_url = 'https://{user_name}:{password}@{host_ip}:{host_port}'
elastic_search_url = elk_base_url.format(user_name=ELASTIC_USER,
                                         password=urlquote(ELASTIC_PASSWORD),
                                         host_ip=ELASTIC_HOST,
                                         host_port=ELASTIC_PORT)

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': [elastic_search_url],
        'verify_certs': False,
    },
}

# Application definition

INSTALLED_APPS = [
    'django_elasticsearch_dsl',
    'sslserver',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Search'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Search.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Search.wsgi.application'

# Authorization

SERVICE_NAME = 'search'

REGISTER_URL = os.environ.get("REGISTER_URL")

REFRESH_URL = os.environ.get("REFRESH_URL")

APP_PORT_VAR = os.environ.get("APP_PORT_VAR")

APP_HOST_VAR = os.environ.get("APP_HOST_VAR")

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'Recommendation.serviceJWTAuthentication.AuthorizationJWTAuthentication',
        'Recommendation.serviceJWTAuthentication.ServiceAuthJWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Initial Service Authentication
SHARED_SECRET_KEY = os.environ.get('SHARED_SECRET_KEY')

# Validation
SERVICE_AUTH_SECRET_KEY = os.environ.get('SERVICE_AUTH_SECRET_KEY')

USER_AUTH_SECRET_KEY = os.environ.get('USER_AUTH_SECRET_KEY')

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': os.environ.get('DB_NAME'),
        'CLIENT': {
            'host': os.environ.get('DB_HOST'),
            'port': int(os.environ.get('DB_PORT')),
            'authSource': 'admin',
            'SSL': True,
            'tlscertificatekeyfile': certKey,
            'tlscertificatekeyfilepassword': SSL_PASSWORD,
            'tlsallowinvalidhostnames': True,
            'tlsallowinvalidcertificates': True,
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'